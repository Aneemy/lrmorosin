{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: 'ToDo',\n    list: [{\n      id: 1,\n      body: 'Вытереть попу'\n    }]\n  }, {\n    id: 1,\n    title: 'InProgress',\n    list: [{\n      id: 2,\n      body: 'Помыть попу'\n    }]\n  }, {\n    id: 2,\n    title: 'Done',\n    list: [{\n      id: 3,\n      body: 'Покакать'\n    }]\n  }]);\n  const [active, setActive] = useState(false);\n  const addNewTask = task => {\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id));\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n  };\n  const removeTask = (boardId, taskId) => {\n    const newBoards = [...boards];\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"0y1/cIDWnIk9ZFu7MXfsKh2R/5c=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","Input","Boards","Modal","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","id","title","list","body","active","setActive","addNewTask","task","findBiggestId","Math","max","map","board","flat","item","newBoards","newId","push","removeTask","boardId","taskId","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst Main = () => {\r\n    const [boards,setBoards] = useState([\r\n        {id:0,title:'ToDo',list:[{id:1,body:'Вытереть попу'}]},\r\n        {id:1,title:'InProgress',list:[{id:2,body:'Помыть попу'}]},\r\n        {id:2,title:'Done',list:[{id:3,body:'Покакать'}]}\r\n    ])\r\n    const [active,setActive] = useState(false)\r\n    const addNewTask = (task) =>{\r\n        const findBiggestId = () =>{\r\n            return Math.max(...boards.map(board =>board.list).flat().map(item =>item.id))\r\n        }\r\n        const newBoards = [...boards]\r\n        const newId = findBiggestId()\r\n        newBoards[0].list.push({id:newId,body:task})\r\n        setBoards(newBoards)\r\n    }\r\n    const removeTask = (boardId,taskId) =>{\r\n        const newBoards = [...boards]\r\n        newBoards[boardId].list.splice(taskId,1)\r\n        setBoards(newBoards)\r\n    }\r\n    return (\r\n        <div>\r\n            <Input addNewTask = {addNewTask} />\r\n            <Boards boards = {boards} setBoards = {setBoards} removeTask = {removeTask}/>\r\n            <Modal active={active} setActive={setActive}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAChC;IAACU,EAAE,EAAC,CAAC;IAACC,KAAK,EAAC,MAAM;IAACC,IAAI,EAAC,CAAC;MAACF,EAAE,EAAC,CAAC;MAACG,IAAI,EAAC;IAAe,CAAC;EAAC,CAAC,EACtD;IAACH,EAAE,EAAC,CAAC;IAACC,KAAK,EAAC,YAAY;IAACC,IAAI,EAAC,CAAC;MAACF,EAAE,EAAC,CAAC;MAACG,IAAI,EAAC;IAAa,CAAC;EAAC,CAAC,EAC1D;IAACH,EAAE,EAAC,CAAC;IAACC,KAAK,EAAC,MAAM;IAACC,IAAI,EAAC,CAAC;MAACF,EAAE,EAAC,CAAC;MAACG,IAAI,EAAC;IAAU,CAAC;EAAC,CAAC,CACpD,CAAC;EACF,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC1C,MAAMgB,UAAU,GAAIC,IAAI,IAAI;IACxB,MAAMC,aAAa,GAAGA,CAAA,KAAK;MACvB,OAAOC,IAAI,CAACC,GAAG,CAAC,GAAGZ,MAAM,CAACa,GAAG,CAACC,KAAK,IAAGA,KAAK,CAACV,IAAI,CAAC,CAACW,IAAI,CAAC,CAAC,CAACF,GAAG,CAACG,IAAI,IAAGA,IAAI,CAACd,EAAE,CAAC,CAAC;IACjF,CAAC;IACD,MAAMe,SAAS,GAAG,CAAC,GAAGjB,MAAM,CAAC;IAC7B,MAAMkB,KAAK,GAAGR,aAAa,CAAC,CAAC;IAC7BO,SAAS,CAAC,CAAC,CAAC,CAACb,IAAI,CAACe,IAAI,CAAC;MAACjB,EAAE,EAACgB,KAAK;MAACb,IAAI,EAACI;IAAI,CAAC,CAAC;IAC5CR,SAAS,CAACgB,SAAS,CAAC;EACxB,CAAC;EACD,MAAMG,UAAU,GAAGA,CAACC,OAAO,EAACC,MAAM,KAAI;IAClC,MAAML,SAAS,GAAG,CAAC,GAAGjB,MAAM,CAAC;IAC7BiB,SAAS,CAACI,OAAO,CAAC,CAACjB,IAAI,CAACmB,MAAM,CAACD,MAAM,EAAC,CAAC,CAAC;IACxCrB,SAAS,CAACgB,SAAS,CAAC;EACxB,CAAC;EACD,oBACIpB,OAAA;IAAA2B,QAAA,gBACI3B,OAAA,CAACJ,KAAK;MAACe,UAAU,EAAIA;IAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnC/B,OAAA,CAACH,MAAM;MAACM,MAAM,EAAIA,MAAO;MAACC,SAAS,EAAIA,SAAU;MAACmB,UAAU,EAAIA;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC7E/B,OAAA,CAACF,KAAK;MAACW,MAAM,EAAEA,MAAO;MAACC,SAAS,EAAEA;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd,CAAC;AAAC7B,EAAA,CA5BID,IAAI;AAAA+B,EAAA,GAAJ/B,IAAI;AA8BV,eAAeA,IAAI;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}