{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport Auth from \"./Auth\";\nimport { addTask, deleteTask, getAllTasks } from \"./http/table\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: 'ToDo',\n    list: []\n  }, {\n    id: 1,\n    title: 'InProgress',\n    list: []\n  }, {\n    id: 2,\n    title: 'Done',\n    list: []\n  }]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [active, setActive] = useState(false);\n  const getBoards = async () => {\n    const result = await getAllTasks(currentUser.id);\n    setBoards(transformArray(result));\n  };\n  const transformArray = array => {\n    const newBoards = [...boards];\n    array.map(elem => {\n      newBoards[elem.boardInd].list.splice(elem.position, 0, {\n        id: elem.id,\n        title: elem.title,\n        userId: elem.user\n      });\n    });\n    return newBoards;\n  };\n  useEffect(() => {\n    if (currentUser !== null) {\n      getBoards();\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (currentUser === null && localStorage.getItem('token')) {\n      setCurrentUser(jwtDecode(localStorage.getItem('token')));\n    }\n  });\n  const addNewTask = task => {\n    const sendNewTask = async task => {\n      const position = boards[0].list.length;\n      await addTask({\n        title: task,\n        position,\n        user: currentUser.id\n      });\n    };\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1;\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n    sendNewTask(task);\n  };\n  const removeTask = (board, task) => {\n    const sendDeleteTask = async (boardId, taskId) => {\n      const taskForDelete = boards[boardId].list[taskId]._id;\n      await deleteTask(taskForDelete);\n    };\n    const newBoards = [...boards];\n    const boardId = boards.indexOf(board);\n    const taskId = boards[boardId].list.indexOf(task);\n    sendDeleteTask(boardId, taskId);\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  const handleTaskDrop = (prevBoard, newBoard) => {\n    let result = null;\n    setBoards(boards.map(b => {\n      if (b.id === prevBoard.id) {\n        result = prevBoard;\n      } else if (b.id === newBoard.id) {\n        result = newBoard;\n      } else result = b;\n      return result;\n    }));\n  };\n  const moveTaskOnClick = (board, task, step) => {\n    const newBoards = [...boards];\n    const boardIndex = boards.indexOf(board);\n    const taskIndex = boards[boardIndex].list.indexOf(task);\n    newBoards[boardIndex].list.splice(taskIndex, 1);\n    newBoards[boardIndex + step].list.push(task);\n    setBoards(newBoards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentUser === null && /*#__PURE__*/_jsxDEV(Auth, {\n      changeUser: setCurrentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask,\n      handleTaskDrop: handleTaskDrop,\n      moveTaskOnClick: moveTaskOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"XyhgrSN5tcvTuquwWTZ33RJdYqM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Input","Boards","Modal","Auth","addTask","deleteTask","getAllTasks","jwtDecode","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","id","title","list","currentUser","setCurrentUser","active","setActive","getBoards","result","transformArray","array","newBoards","map","elem","boardInd","splice","position","userId","user","localStorage","getItem","addNewTask","task","sendNewTask","length","findBiggestId","Math","max","board","flat","item","newId","push","body","removeTask","sendDeleteTask","boardId","taskId","taskForDelete","_id","indexOf","handleTaskDrop","prevBoard","newBoard","b","moveTaskOnClick","step","boardIndex","taskIndex","className","children","changeUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\nimport Auth from \"./Auth\";\r\nimport {addTask, deleteTask, getAllTasks} from \"./http/table\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nconst Main = () => {\r\n    const [boards,setBoards] = useState([\r\n        {id:0,title:'ToDo',list:[]},\r\n        {id:1,title:'InProgress',list:[]},\r\n        {id:2,title:'Done',list:[]}\r\n    ])\r\n    const [currentUser,setCurrentUser] = useState(null)\r\n    const [active,setActive] = useState(false)\r\n    const getBoards = async () =>{\r\n        const result = await getAllTasks(currentUser.id)\r\n        setBoards(transformArray(result))\r\n    }\r\n    const transformArray = (array) =>{\r\n        const newBoards = [...boards]\r\n        array.map((elem=>{\r\n         newBoards[elem.boardInd].list.splice(elem.position,0,{id:elem.id,title:elem.title,userId:elem.user})\r\n\r\n        }))\r\n        return newBoards\r\n    }\r\n    useEffect(() => {\r\n        if (currentUser!==null){\r\n            getBoards()\r\n        }\r\n    }, [currentUser]);\r\n    useEffect(()=>{\r\n        if (currentUser===null&&localStorage.getItem('token')){\r\n            setCurrentUser(jwtDecode(localStorage.getItem('token')))\r\n        }\r\n    })\r\n    const addNewTask = (task) =>{\r\n        const sendNewTask = async (task) =>{\r\n            const position = boards[0].list.length\r\n            await addTask({title:task,position,user:currentUser.id})\r\n        }\r\n        const findBiggestId = () =>{\r\n            return Math.max(...boards.map(board =>board.list).flat().map(item =>item.id))+1\r\n        }\r\n        const newBoards = [...boards]\r\n        const newId = findBiggestId()\r\n        newBoards[0].list.push({id:newId,body:task})\r\n        setBoards(newBoards)\r\n        sendNewTask(task)\r\n    }\r\n    const removeTask = (board,task) =>{\r\n        const sendDeleteTask = async (boardId,taskId) =>{\r\n            const taskForDelete = boards[boardId].list[taskId]._id\r\n            await deleteTask(taskForDelete)\r\n        }\r\n        const newBoards = [...boards]\r\n        const boardId = boards.indexOf(board)\r\n        const taskId = boards[boardId].list.indexOf(task)\r\n        sendDeleteTask(boardId,taskId)\r\n        newBoards[boardId].list.splice(taskId,1)\r\n        setBoards(newBoards)\r\n    }\r\n    const handleTaskDrop = (prevBoard,newBoard) =>{\r\n        let result = null\r\n        setBoards(boards.map(b =>{\r\n            if (b.id === prevBoard.id){\r\n                result = prevBoard\r\n            }\r\n            else if (b.id === newBoard.id){\r\n                result = newBoard\r\n            }\r\n            else\r\n                result = b\r\n            return result\r\n        }))\r\n    }\r\n    const moveTaskOnClick = (board,task,step) =>{\r\n        const newBoards = [...boards]\r\n        const boardIndex = boards.indexOf(board)\r\n        const taskIndex = boards[boardIndex].list.indexOf(task)\r\n        newBoards[boardIndex].list.splice(taskIndex,1)\r\n        newBoards[boardIndex+step].list.push(task)\r\n        setBoards(newBoards)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {currentUser===null&&<Auth changeUser = {setCurrentUser}/>}\r\n            <Input addNewTask = {addNewTask} />\r\n            {<Boards boards = {boards} setBoards = {setBoards} removeTask = {removeTask} handleTaskDrop= {handleTaskDrop}\r\n            moveTaskOnClick = {moveTaskOnClick}/>}\r\n            <Modal active={active} setActive={setActive}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}