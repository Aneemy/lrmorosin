{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport Auth from \"./Auth\";\nimport { addTask, deleteTask, getAllTasks } from \"./http/table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: 'ToDo',\n    list: []\n  }, {\n    id: 1,\n    title: 'InProgress',\n    list: []\n  }, {\n    id: 2,\n    title: 'Done',\n    list: []\n  }]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [active, setActive] = useState(false);\n  console.log(currentUser);\n  useEffect(() => {\n    const getBoards = async () => {\n      const result = await getAllTasks(currentUser.id);\n      setBoards(result);\n    };\n    if (currentUser !== null) {\n      getBoards();\n    }\n  }, [currentUser]);\n  const addNewTask = task => {\n    const sendNewTask = async task => {\n      const position = boards[0].list.length;\n      await addTask({\n        title: task,\n        position,\n        user: currentUser.id\n      });\n    };\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1;\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n    sendNewTask(task);\n  };\n  const removeTask = (board, task) => {\n    const sendDeleteTask = async (boardId, taskId) => {\n      const taskForDelete = boards[boardId].list[taskId]._id;\n      await deleteTask(taskForDelete);\n    };\n    const newBoards = [...boards];\n    const boardId = boards.indexOf(board);\n    const taskId = boards[boardId].list.indexOf(task);\n    sendDeleteTask(boardId, taskId);\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  const handleTaskDrop = (prevBoard, newBoard) => {\n    let result = null;\n    setBoards(boards.map(b => {\n      if (b.id === prevBoard.id) {\n        result = prevBoard;\n      } else if (b.id === newBoard.id) {\n        result = newBoard;\n      } else result = b;\n      return result;\n    }));\n  };\n  const moveTaskOnClick = (board, task, step) => {\n    const newBoards = [...boards];\n    const boardIndex = boards.indexOf(board);\n    const taskIndex = boards[boardIndex].list.indexOf(task);\n    newBoards[boardIndex].list.splice(taskIndex, 1);\n    newBoards[boardIndex + step].list.push(task);\n    setBoards(newBoards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentUser === null && /*#__PURE__*/_jsxDEV(Auth, {\n      changeUser: setCurrentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask,\n      handleTaskDrop: handleTaskDrop,\n      moveTaskOnClick: moveTaskOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"vP2W0Cxv9U3O4ffJSuCwBRXmk4w=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Input","Boards","Modal","Auth","addTask","deleteTask","getAllTasks","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","id","title","list","currentUser","setCurrentUser","active","setActive","console","log","getBoards","result","addNewTask","task","sendNewTask","position","length","user","findBiggestId","Math","max","map","board","flat","item","newBoards","newId","push","body","removeTask","sendDeleteTask","boardId","taskId","taskForDelete","_id","indexOf","splice","handleTaskDrop","prevBoard","newBoard","b","moveTaskOnClick","step","boardIndex","taskIndex","className","children","changeUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\nimport Auth from \"./Auth\";\r\nimport {addTask, deleteTask, getAllTasks} from \"./http/table\";\r\n\r\nconst Main = () => {\r\n    const [boards,setBoards] = useState([\r\n        {id:0,title:'ToDo',list:[]},\r\n        {id:1,title:'InProgress',list:[]},\r\n        {id:2,title:'Done',list:[]}\r\n    ])\r\n    const [currentUser,setCurrentUser] = useState(null)\r\n    const [active,setActive] = useState(false)\r\n    console.log(currentUser)\r\n    useEffect(() => {\r\n        const getBoards = async () =>{\r\n            const result = await getAllTasks(currentUser.id)\r\n            setBoards(result)\r\n        }\r\n        if (currentUser!==null){\r\n            getBoards()\r\n        }\r\n    }, [currentUser]);\r\n    const addNewTask = (task) =>{\r\n        const sendNewTask = async (task) =>{\r\n            const position = boards[0].list.length\r\n            await addTask({title:task,position,user:currentUser.id})\r\n        }\r\n        const findBiggestId = () =>{\r\n            return Math.max(...boards.map(board =>board.list).flat().map(item =>item.id))+1\r\n        }\r\n        const newBoards = [...boards]\r\n        const newId = findBiggestId()\r\n        newBoards[0].list.push({id:newId,body:task})\r\n        setBoards(newBoards)\r\n        sendNewTask(task)\r\n    }\r\n    const removeTask = (board,task) =>{\r\n        const sendDeleteTask = async (boardId,taskId) =>{\r\n            const taskForDelete = boards[boardId].list[taskId]._id\r\n            await deleteTask(taskForDelete)\r\n        }\r\n        const newBoards = [...boards]\r\n        const boardId = boards.indexOf(board)\r\n        const taskId = boards[boardId].list.indexOf(task)\r\n        sendDeleteTask(boardId,taskId)\r\n        newBoards[boardId].list.splice(taskId,1)\r\n        setBoards(newBoards)\r\n    }\r\n    const handleTaskDrop = (prevBoard,newBoard) =>{\r\n        let result = null\r\n        setBoards(boards.map(b =>{\r\n            if (b.id === prevBoard.id){\r\n                result = prevBoard\r\n            }\r\n            else if (b.id === newBoard.id){\r\n                result = newBoard\r\n            }\r\n            else\r\n                result = b\r\n            return result\r\n        }))\r\n    }\r\n    const moveTaskOnClick = (board,task,step) =>{\r\n        const newBoards = [...boards]\r\n        const boardIndex = boards.indexOf(board)\r\n        const taskIndex = boards[boardIndex].list.indexOf(task)\r\n        newBoards[boardIndex].list.splice(taskIndex,1)\r\n        newBoards[boardIndex+step].list.push(task)\r\n        setBoards(newBoards)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {currentUser===null&&<Auth changeUser = {setCurrentUser}/>}\r\n            <Input addNewTask = {addNewTask} />\r\n            {<Boards boards = {boards} setBoards = {setBoards} removeTask = {removeTask} handleTaskDrop= {handleTaskDrop}\r\n            moveTaskOnClick = {moveTaskOnClick}/>}\r\n            <Modal active={active} setActive={setActive}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}