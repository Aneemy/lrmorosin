{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport Auth from \"./Auth\";\nimport { addTask, deleteTask, getAllTasks, updateTask } from \"./http/table\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: 'ToDo',\n    list: []\n  }, {\n    id: 1,\n    title: 'InProgress',\n    list: []\n  }, {\n    id: 2,\n    title: 'Done',\n    list: []\n  }]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [active, setActive] = useState(false);\n  const getBoards = async () => {\n    const result = await getAllTasks(currentUser.id);\n    setBoards(transformArray(result.tasks));\n  };\n  const transformArray = array => {\n    const newBoards = [{\n      id: 0,\n      title: 'ToDo',\n      list: []\n    }, {\n      id: 1,\n      title: 'InProgress',\n      list: []\n    }, {\n      id: 2,\n      title: 'Done',\n      list: []\n    }];\n    array.map(elem => {\n      newBoards[elem.boardInd].list.splice(elem.position, 0, {\n        id: elem._id,\n        body: elem.title,\n        userId: elem.user\n      });\n    });\n    return newBoards;\n  };\n  useEffect(() => {\n    if (currentUser !== null) {\n      getBoards();\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (currentUser === null && localStorage.getItem('token')) {\n      setCurrentUser(jwtDecode(localStorage.getItem('token')));\n    }\n  }, []);\n  const addNewTask = task => {\n    const sendNewTask = async task => {\n      const position = boards[0].list.length;\n      await addTask({\n        title: task,\n        position,\n        boardInd: 0\n      });\n    };\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1;\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n    sendNewTask(task).then(r => getBoards());\n  };\n  const removeTask = (board, task) => {\n    const sendDeleteTask = async (boardId, taskId) => {\n      const taskForDelete = boards[boardId].list[taskId].id;\n      await deleteTask(taskForDelete);\n    };\n    const newBoards = [...boards];\n    const boardId = boards.indexOf(board);\n    const taskId = boards[boardId].list.indexOf(task);\n    sendDeleteTask(boardId, taskId);\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  const handleTaskDrop = (prevBoard, newBoard) => {\n    let result = null;\n    setBoards(boards.map(b => {\n      if (b.id === prevBoard.id) {\n        result = prevBoard;\n      } else if (b.id === newBoard.id) {\n        result = newBoard;\n      } else result = b;\n      return result;\n    }));\n  };\n  const moveTaskOnClick = (board, task, step) => {\n    const newBoards = [...boards];\n    const boardIndex = boards.indexOf(board);\n    const taskIndex = boards[boardIndex].list.indexOf(task);\n    updateTask(task.id, {\n      boardInd: boardIndex + step,\n      position: newBoards[boardIndex + step].list.length\n    });\n    newBoards[boardIndex].list.splice(taskIndex, 1);\n    newBoards[boardIndex + step].list.push(task);\n    setBoards(newBoards);\n  };\n  const handleUnLog = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentUser === null && /*#__PURE__*/_jsxDEV(Auth, {\n      changeUser: setCurrentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }, this), currentUser !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleUnLog(),\n      style: {\n        cursor: \"pointer\",\n        color: 'white'\n      },\n      children: [\"\\u0412\\u044B\\u0439\\u0442\\u0438 \\u0438\\u0437 \\u0443\\u0447\\u0435\\u0442\\u043D\\u043E\\u0439 \\u0437\\u0430\\u043F\\u0438\\u0441\\u0438 \", currentUser.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask,\n      handleTaskDrop: handleTaskDrop,\n      moveTaskOnClick: moveTaskOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 3\n  }, this);\n};\n_s(Main, \"/sU2MptITmIVHKLwdNlmFv7ORFU=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Input","Boards","Modal","Auth","addTask","deleteTask","getAllTasks","updateTask","jwtDecode","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","id","title","list","currentUser","setCurrentUser","active","setActive","getBoards","result","transformArray","tasks","array","newBoards","map","elem","boardInd","splice","position","_id","body","userId","user","localStorage","getItem","addNewTask","task","sendNewTask","length","findBiggestId","Math","max","board","flat","item","newId","push","then","r","removeTask","sendDeleteTask","boardId","taskId","taskForDelete","indexOf","handleTaskDrop","prevBoard","newBoard","b","moveTaskOnClick","step","boardIndex","taskIndex","handleUnLog","removeItem","className","children","changeUser","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","color","username","_c","$RefreshReg$"],"sources":["E:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\nimport Auth from \"./Auth\";\r\nimport { addTask, deleteTask, getAllTasks, updateTask } from \"./http/table\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst Main = () => {\r\n\tconst [boards, setBoards] = useState([\r\n\t\t{ id: 0, title: 'ToDo', list: [] },\r\n\t\t{ id: 1, title: 'InProgress', list: [] },\r\n\t\t{ id: 2, title: 'Done', list: [] }\r\n\t])\r\n\tconst [currentUser, setCurrentUser] = useState(null)\r\n\tconst [active, setActive] = useState(false)\r\n\tconst getBoards = async () => {\r\n\t\tconst result = await getAllTasks(currentUser.id)\r\n\t\tsetBoards(transformArray(result.tasks))\r\n\t}\r\n\tconst transformArray = (array) => {\r\n\t\tconst newBoards = [\r\n\t\t\t{ id: 0, title: 'ToDo', list: [] },\r\n\t\t\t{ id: 1, title: 'InProgress', list: [] },\r\n\t\t\t{ id: 2, title: 'Done', list: [] }\r\n\t\t]\r\n\t\tarray.map((elem => {\r\n\t\t\tnewBoards[elem.boardInd].list.splice(elem.position, 0, { id: elem._id, body: elem.title, userId: elem.user })\r\n\r\n\t\t}))\r\n\t\treturn newBoards\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (currentUser !== null) {\r\n\t\t\tgetBoards()\r\n\t\t}\r\n\t}, [currentUser]);\r\n\tuseEffect(() => {\r\n\t\tif (currentUser === null && localStorage.getItem('token')) {\r\n\t\t\tsetCurrentUser(jwtDecode(localStorage.getItem('token')))\r\n\t\t}\r\n\t}, [])\r\n\tconst addNewTask = (task) => {\r\n\t\tconst sendNewTask = async (task) => {\r\n\t\t\tconst position = boards[0].list.length\r\n\t\t\tawait addTask({ title: task, position, boardInd: 0,})\r\n\t\t}\r\n\t\tconst findBiggestId = () => {\r\n\t\t\treturn Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1\r\n\t\t}\r\n\t\tconst newBoards = [...boards]\r\n\t\tconst newId = findBiggestId()\r\n\t\tnewBoards[0].list.push({ id: newId, body: task })\r\n\t\tsetBoards(newBoards)\r\n\t\tsendNewTask(task).then(r => getBoards())\r\n\t}\r\n\tconst removeTask = (board, task) => {\r\n\t\tconst sendDeleteTask = async (boardId, taskId) => {\r\n\t\t\tconst taskForDelete = boards[boardId].list[taskId].id\r\n\t\t\tawait deleteTask(taskForDelete)\r\n\t\t}\r\n\t\tconst newBoards = [...boards]\r\n\t\tconst boardId = boards.indexOf(board)\r\n\t\tconst taskId = boards[boardId].list.indexOf(task)\r\n\t\tsendDeleteTask(boardId, taskId)\r\n\t\tnewBoards[boardId].list.splice(taskId, 1)\r\n\t\tsetBoards(newBoards)\r\n\t}\r\n\tconst handleTaskDrop = (prevBoard, newBoard) => {\r\n\t\tlet result = null\r\n\t\tsetBoards(boards.map(b => {\r\n\t\t\tif (b.id === prevBoard.id) {\r\n\t\t\t\tresult = prevBoard\r\n\t\t\t}\r\n\t\t\telse if (b.id === newBoard.id) {\r\n\t\t\t\tresult = newBoard\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = b\r\n\t\t\treturn result\r\n\t\t}))\r\n\t}\r\n\tconst moveTaskOnClick = (board, task, step) => {\r\n\t\tconst newBoards = [...boards]\r\n\t\tconst boardIndex = boards.indexOf(board)\r\n\t\tconst taskIndex = boards[boardIndex].list.indexOf(task)\r\n\t\tupdateTask(task.id, { boardInd: boardIndex + step, position: newBoards[boardIndex + step].list.length })\r\n\t\tnewBoards[boardIndex].list.splice(taskIndex, 1)\r\n\t\tnewBoards[boardIndex + step].list.push(task)\r\n\t\tsetBoards(newBoards)\r\n\t}\r\n\tconst handleUnLog = () =>{\r\n\t\tlocalStorage.removeItem('token')\r\n\t\tsetCurrentUser(null)\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{currentUser === null && <Auth changeUser={setCurrentUser} />}\r\n\t\t\t{currentUser !== null &&\r\n\t\t\t\t<div onClick={()=>handleUnLog()} style={{cursor:\"pointer\",color:'white'}}>\r\n\t\t\t\tВыйти из учетной записи {currentUser.username}\r\n\t\t\t</div>}\r\n\t\t\t<Input addNewTask={addNewTask} />\r\n\t\t\t{<Boards boards={boards} setBoards={setBoards} removeTask={removeTask} handleTaskDrop={handleTaskDrop}\r\n\t\t\t\tmoveTaskOnClick={moveTaskOnClick} />}\r\n\t\t\t<Modal active={active} setActive={setActive} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}