{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport Auth from \"./Auth\";\nimport { addTask, deleteTask, getAllTasks } from \"./http/table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  // const [boards,setBoards] = useState([\n  //     {id:0,title:'ToDo',list:[{id:1,body:'Вытереть попу'}]},\n  //     {id:1,title:'InProgress',list:[{id:2,body:'Помыть попу'}]},\n  //     {id:2,title:'Done',list:[{id:3,body:'Покакать'}]}\n  // ])\n  const [boards, setBoards] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [active, setActive] = useState(false);\n  console.log(currentUser);\n  useEffect(() => {\n    const getBoards = async () => {\n      const result = await getAllTasks(currentUser._id);\n      setBoards(result);\n    };\n    if (currentUser !== null) {\n      getBoards();\n    }\n  }, [currentUser]);\n  const addNewTask = task => {\n    const sendNewTask = async task => {\n      const position = boards[0].list.length;\n      await addTask({\n        title: task,\n        position,\n        user: currentUser._id\n      });\n    };\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1;\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n    sendNewTask(task);\n  };\n  const removeTask = (board, task) => {\n    const sendDeleteTask = async (boardId, taskId) => {\n      const taskForDelete = boards[boardId].list[taskId]._id;\n      await deleteTask(taskForDelete);\n    };\n    const newBoards = [...boards];\n    const boardId = boards.indexOf(board);\n    const taskId = boards[boardId].list.indexOf(task);\n    sendDeleteTask(boardId, taskId);\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  const handleTaskDrop = (prevBoard, newBoard) => {\n    let result = null;\n    setBoards(boards.map(b => {\n      if (b.id === prevBoard.id) {\n        result = prevBoard;\n      } else if (b.id === newBoard.id) {\n        result = newBoard;\n      } else result = b;\n      return result;\n    }));\n  };\n  const moveTaskOnClick = (board, task, step) => {\n    const newBoards = [...boards];\n    const boardIndex = boards.indexOf(board);\n    const taskIndex = boards[boardIndex].list.indexOf(task);\n    newBoards[boardIndex].list.splice(taskIndex, 1);\n    newBoards[boardIndex + step].list.push(task);\n    setBoards(newBoards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentUser === null && /*#__PURE__*/_jsxDEV(Auth, {\n      setUser: setCurrentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), boards !== null && /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask,\n      handleTaskDrop: handleTaskDrop,\n      moveTaskOnClick: moveTaskOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"kShqnlgpVCJCNr1a7viB5eKkB6o=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Input","Boards","Modal","Auth","addTask","deleteTask","getAllTasks","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","currentUser","setCurrentUser","active","setActive","console","log","getBoards","result","_id","addNewTask","task","sendNewTask","position","list","length","title","user","findBiggestId","Math","max","map","board","flat","item","id","newBoards","newId","push","body","removeTask","sendDeleteTask","boardId","taskId","taskForDelete","indexOf","splice","handleTaskDrop","prevBoard","newBoard","b","moveTaskOnClick","step","boardIndex","taskIndex","className","children","setUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\nimport Auth from \"./Auth\";\r\nimport {addTask, deleteTask, getAllTasks} from \"./http/table\";\r\n\r\nconst Main = () => {\r\n    // const [boards,setBoards] = useState([\r\n    //     {id:0,title:'ToDo',list:[{id:1,body:'Вытереть попу'}]},\r\n    //     {id:1,title:'InProgress',list:[{id:2,body:'Помыть попу'}]},\r\n    //     {id:2,title:'Done',list:[{id:3,body:'Покакать'}]}\r\n    // ])\r\n    const [boards,setBoards] = useState(null)\r\n    const [currentUser,setCurrentUser] = useState(null)\r\n    const [active,setActive] = useState(false)\r\n    console.log(currentUser)\r\n    useEffect(() => {\r\n        const getBoards = async () =>{\r\n            const result = await getAllTasks(currentUser._id)\r\n            setBoards(result)\r\n        }\r\n        if (currentUser!==null){\r\n            getBoards()\r\n        }\r\n    }, [currentUser]);\r\n    const addNewTask = (task) =>{\r\n        const sendNewTask = async (task) =>{\r\n            const position = boards[0].list.length\r\n            await addTask({title:task,position,user:currentUser._id})\r\n        }\r\n        const findBiggestId = () =>{\r\n            return Math.max(...boards.map(board =>board.list).flat().map(item =>item.id))+1\r\n        }\r\n        const newBoards = [...boards]\r\n        const newId = findBiggestId()\r\n        newBoards[0].list.push({id:newId,body:task})\r\n        setBoards(newBoards)\r\n        sendNewTask(task)\r\n    }\r\n    const removeTask = (board,task) =>{\r\n        const sendDeleteTask = async (boardId,taskId) =>{\r\n            const taskForDelete = boards[boardId].list[taskId]._id\r\n            await deleteTask(taskForDelete)\r\n        }\r\n        const newBoards = [...boards]\r\n        const boardId = boards.indexOf(board)\r\n        const taskId = boards[boardId].list.indexOf(task)\r\n        sendDeleteTask(boardId,taskId)\r\n        newBoards[boardId].list.splice(taskId,1)\r\n        setBoards(newBoards)\r\n    }\r\n    const handleTaskDrop = (prevBoard,newBoard) =>{\r\n        let result = null\r\n        setBoards(boards.map(b =>{\r\n            if (b.id === prevBoard.id){\r\n                result = prevBoard\r\n            }\r\n            else if (b.id === newBoard.id){\r\n                result = newBoard\r\n            }\r\n            else\r\n                result = b\r\n            return result\r\n        }))\r\n    }\r\n    const moveTaskOnClick = (board,task,step) =>{\r\n        const newBoards = [...boards]\r\n        const boardIndex = boards.indexOf(board)\r\n        const taskIndex = boards[boardIndex].list.indexOf(task)\r\n        newBoards[boardIndex].list.splice(taskIndex,1)\r\n        newBoards[boardIndex+step].list.push(task)\r\n        setBoards(newBoards)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {currentUser===null&&<Auth setUser = {setCurrentUser}/>}\r\n            <Input addNewTask = {addNewTask} />\r\n            {boards!==null&&<Boards boards = {boards} setBoards = {setBoards} removeTask = {removeTask} handleTaskDrop= {handleTaskDrop}\r\n            moveTaskOnClick = {moveTaskOnClick}/>}\r\n            <Modal active={active} setActive={setActive}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}