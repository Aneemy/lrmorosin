{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\lrmorosin\\\\src\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Input from \"./Input\";\nimport Boards from \"./Boards\";\nimport Modal from \"./Modal\";\nimport Auth from \"./Auth\";\nimport { addTask } from \"./http/table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: 'ToDo',\n    list: [{\n      id: 1,\n      body: 'Вытереть попу'\n    }]\n  }, {\n    id: 1,\n    title: 'InProgress',\n    list: [{\n      id: 2,\n      body: 'Помыть попу'\n    }]\n  }, {\n    id: 2,\n    title: 'Done',\n    list: [{\n      id: 3,\n      body: 'Покакать'\n    }]\n  }]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [active, setActive] = useState(false);\n  const sendNewTask = async () => {\n    const position = boards[0].list.length;\n    addTask({\n      title: task,\n      position,\n      user: currentUser._id\n    });\n  };\n  const addNewTask = task => {\n    const findBiggestId = () => {\n      return Math.max(...boards.map(board => board.list).flat().map(item => item.id)) + 1;\n    };\n    const newBoards = [...boards];\n    const newId = findBiggestId();\n    newBoards[0].list.push({\n      id: newId,\n      body: task\n    });\n    setBoards(newBoards);\n  };\n  const removeTask = (board, task) => {\n    const newBoards = [...boards];\n    const boardId = boards.indexOf(board);\n    const taskId = boards[boardId].list.indexOf(task);\n    newBoards[boardId].list.splice(taskId, 1);\n    setBoards(newBoards);\n  };\n  const handleTaskDrop = (prevBoard, newBoard) => {\n    let result = null;\n    setBoards(boards.map(b => {\n      if (b.id === prevBoard.id) {\n        result = prevBoard;\n      } else if (b.id === newBoard.id) {\n        result = newBoard;\n      } else result = b;\n      return result;\n    }));\n  };\n  const moveTaskOnClick = (board, task, step) => {\n    const newBoards = [...boards];\n    const boardIndex = boards.indexOf(board);\n    const taskIndex = boards[boardIndex].list.indexOf(task);\n    newBoards[boardIndex].list.splice(taskIndex, 1);\n    newBoards[boardIndex + step].list.push(task);\n    setBoards(newBoards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentUser === null && /*#__PURE__*/_jsxDEV(Auth, {\n      setUser: setCurrentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      addNewTask: addNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Boards, {\n      boards: boards,\n      setBoards: setBoards,\n      removeTask: removeTask,\n      handleTaskDrop: handleTaskDrop,\n      moveTaskOnClick: moveTaskOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: active,\n      setActive: setActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"WGWoZRcFhZER+9h7LcN/6VSSkIc=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","Input","Boards","Modal","Auth","addTask","jsxDEV","_jsxDEV","Main","_s","boards","setBoards","id","title","list","body","currentUser","setCurrentUser","active","setActive","sendNewTask","position","length","task","user","_id","addNewTask","findBiggestId","Math","max","map","board","flat","item","newBoards","newId","push","removeTask","boardId","indexOf","taskId","splice","handleTaskDrop","prevBoard","newBoard","result","b","moveTaskOnClick","step","boardIndex","taskIndex","className","children","setUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/code/lrmorosin/src/Main.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport Boards from \"./Boards\";\r\nimport Modal from \"./Modal\";\r\nimport Auth from \"./Auth\";\r\nimport {addTask} from \"./http/table\";\r\n\r\nconst Main = () => {\r\n    const [boards,setBoards] = useState([\r\n        {id:0,title:'ToDo',list:[{id:1,body:'Вытереть попу'}]},\r\n        {id:1,title:'InProgress',list:[{id:2,body:'Помыть попу'}]},\r\n        {id:2,title:'Done',list:[{id:3,body:'Покакать'}]}\r\n    ])\r\n    const [currentUser,setCurrentUser] = useState(null)\r\n    const [active,setActive] = useState(false)\r\n    const sendNewTask = async () =>{\r\n        const position = boards[0].list.length\r\n        addTask({title:task,position,user:currentUser._id})\r\n    }\r\n    const addNewTask = (task) =>{\r\n        const findBiggestId = () =>{\r\n            return Math.max(...boards.map(board =>board.list).flat().map(item =>item.id))+1\r\n        }\r\n        const newBoards = [...boards]\r\n        const newId = findBiggestId()\r\n        newBoards[0].list.push({id:newId,body:task})\r\n        setBoards(newBoards)\r\n    }\r\n    const removeTask = (board,task) =>{\r\n        const newBoards = [...boards]\r\n        const boardId = boards.indexOf(board)\r\n        const taskId = boards[boardId].list.indexOf(task)\r\n        newBoards[boardId].list.splice(taskId,1)\r\n        setBoards(newBoards)\r\n    }\r\n    const handleTaskDrop = (prevBoard,newBoard) =>{\r\n        let result = null\r\n        setBoards(boards.map(b =>{\r\n            if (b.id === prevBoard.id){\r\n                result = prevBoard\r\n            }\r\n            else if (b.id === newBoard.id){\r\n                result = newBoard\r\n            }\r\n            else\r\n                result = b\r\n            return result\r\n        }))\r\n    }\r\n    const moveTaskOnClick = (board,task,step) =>{\r\n        const newBoards = [...boards]\r\n        const boardIndex = boards.indexOf(board)\r\n        const taskIndex = boards[boardIndex].list.indexOf(task)\r\n        newBoards[boardIndex].list.splice(taskIndex,1)\r\n        newBoards[boardIndex+step].list.push(task)\r\n        setBoards(newBoards)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {currentUser===null&&<Auth setUser = {setCurrentUser}/>}\r\n            <Input addNewTask = {addNewTask} />\r\n            <Boards boards = {boards} setBoards = {setBoards} removeTask = {removeTask} handleTaskDrop= {handleTaskDrop}\r\n            moveTaskOnClick = {moveTaskOnClick}/>\r\n            <Modal active={active} setActive={setActive}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}